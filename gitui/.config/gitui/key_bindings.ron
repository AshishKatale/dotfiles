// bit for modifiers
// bits: 0  None 
// bits: 1  SHIFT
// bits: 2  CONTROL
//
// Note:
// If the default key layout is lower case,
// and you want to use `Shift + q` to trigger the exit event,
// the setting should like this `exit: Some(( code: Char('Q'), modifiers: ( bits: 1,),)),`
// The Char should be upper case, and the shift modified bit should be set to 1.
//
// Note:
// find `KeysList` type in src/keys/key_list.rs for all possible keys.
// every key not overwritten via the config file will use the default specified there
(
    focus_right: Some(( code: Char('l'), modifiers: ( bits: 0,),)),
    focus_left: Some(( code: Char('h'), modifiers: ( bits: 0,),)),
    focus_above: Some(( code: Char('k'), modifiers: ( bits: 0,),)),
    focus_below: Some(( code: Char('j'), modifiers: ( bits: 0,),)),

    open_help: Some(( code: F(1), modifiers: ( bits: 0,),)),

    move_left: Some(( code: Char('h'), modifiers: ( bits: 0,),)),
    move_right: Some(( code: Char('l'), modifiers: ( bits: 0,),)),
    move_up: Some(( code: Char('k'), modifiers: ( bits: 0,),)),
    move_down: Some(( code: Char('j'), modifiers: ( bits: 0,),)),
    popup_up: Some(( code: Char('p'), modifiers: ( bits: 2,),)),
    popup_down: Some(( code: Char('n'), modifiers: ( bits: 2,),)),
    page_up: Some(( code: Char('b'), modifiers: ( bits: 2,),)),
    page_down: Some(( code: Char('f'), modifiers: ( bits: 2,),)),
    home: Some(( code: Char('g'), modifiers: ( bits: 0,),)),
    end: Some(( code: Char('G'), modifiers: ( bits: 1,),)),
    shift_up: Some(( code: Char('K'), modifiers: ( bits: 1,),)),
    shift_down: Some(( code: Char('J'), modifiers: ( bits: 1,),)),

    edit_file: Some(( code: Char('I'), modifiers: ( bits: 1,),)),

    status_reset_item: Some(( code: Char('U'), modifiers: ( bits: 1,),)),

    diff_reset_lines: Some(( code: Char('u'), modifiers: ( bits: 0,),)),
    diff_stage_lines: Some(( code: Char('s'), modifiers: ( bits: 0,),)),

    stashing_save: Some(( code: Char('w'), modifiers: ( bits: 0,),)),
    stashing_toggle_index: Some(( code: Char('m'), modifiers: ( bits: 0,),)),

    stash_open: Some(( code: Char('l'), modifiers: ( bits: 0,),)),

    abort_merge: Some(( code: Char('M'), modifiers: ( bits: 1,),)),
)

// tab_status: KeyEvent { code: KeyCode::Char('1'), modifiers: KeyModifiers::empty()},
// tab_log: KeyEvent { code: KeyCode::Char('2'), modifiers: KeyModifiers::empty()},
// tab_files: KeyEvent { code: KeyCode::Char('3'), modifiers: KeyModifiers::empty()},
// tab_stashing: KeyEvent { code: KeyCode::Char('4'), modifiers: KeyModifiers::empty()},
// tab_stashes: KeyEvent { code: KeyCode::Char('5'), modifiers: KeyModifiers::empty()},
// tab_toggle: KeyEvent { code: KeyCode::Tab, modifiers: KeyModifiers::empty()},
// tab_toggle_reverse: KeyEvent { code: KeyCode::BackTab, modifiers: KeyModifiers::SHIFT},
// toggle_workarea: KeyEvent { code: KeyCode::Char('w'), modifiers: KeyModifiers::empty()},
// focus_right: KeyEvent { code: KeyCode::Right, modifiers: KeyModifiers::empty()},
// focus_left: KeyEvent { code: KeyCode::Left, modifiers: KeyModifiers::empty()},
// focus_above: KeyEvent { code: KeyCode::Up, modifiers: KeyModifiers::empty()},
// focus_below: KeyEvent { code: KeyCode::Down, modifiers: KeyModifiers::empty()},
// exit: KeyEvent { code: KeyCode::Char('c'), modifiers: KeyModifiers::CONTROL},
// quit: KeyEvent { code: KeyCode::Char('q'), modifiers: KeyModifiers::empty()},
// exit_popup: KeyEvent { code: KeyCode::Esc, modifiers: KeyModifiers::empty()},
// open_commit: KeyEvent { code: KeyCode::Char('c'), modifiers: KeyModifiers::empty()},
// open_commit_editor: KeyEvent { code: KeyCode::Char('e'), modifiers:KeyModifiers::CONTROL},
// open_help: KeyEvent { code: KeyCode::Char('h'), modifiers: KeyModifiers::empty()},
// open_options: KeyEvent { code: KeyCode::Char('o'), modifiers: KeyModifiers::empty()},
// move_left: KeyEvent { code: KeyCode::Left, modifiers: KeyModifiers::empty()},
// move_right: KeyEvent { code: KeyCode::Right, modifiers: KeyModifiers::empty()},
// tree_collapse_recursive: KeyEvent { code: KeyCode::Left, modifiers: KeyModifiers::SHIFT},
// tree_expand_recursive: KeyEvent { code: KeyCode::Right, modifiers: KeyModifiers::SHIFT},
// home: KeyEvent { code: KeyCode::Home, modifiers: KeyModifiers::empty()},
// end: KeyEvent { code: KeyCode::End, modifiers: KeyModifiers::empty()},
// move_up: KeyEvent { code: KeyCode::Up, modifiers: KeyModifiers::empty()},
// move_down: KeyEvent { code: KeyCode::Down, modifiers: KeyModifiers::empty()},
// popup_up: KeyEvent { code: KeyCode::Up, modifiers: KeyModifiers::empty()},
// popup_down: KeyEvent { code: KeyCode::Down, modifiers: KeyModifiers::empty()},
// page_down: KeyEvent { code: KeyCode::PageDown, modifiers: KeyModifiers::empty()},
// page_up: KeyEvent { code: KeyCode::PageUp, modifiers: KeyModifiers::empty()},
// shift_up: KeyEvent { code: KeyCode::Up, modifiers: KeyModifiers::SHIFT},
// shift_down: KeyEvent { code: KeyCode::Down, modifiers: KeyModifiers::SHIFT},
// enter: KeyEvent { code: KeyCode::Enter, modifiers: KeyModifiers::empty()},
// blame: KeyEvent { code: KeyCode::Char('B'), modifiers: KeyModifiers::SHIFT},
// file_history: KeyEvent { code: KeyCode::Char('H'), modifiers: KeyModifiers::SHIFT},
// edit_file: KeyEvent { code: KeyCode::Char('e'), modifiers: KeyModifiers::empty()},
// status_stage_all: KeyEvent { code: KeyCode::Char('a'), modifiers: KeyModifiers::empty()},
// status_reset_item: KeyEvent { code: KeyCode::Char('D'), modifiers: KeyModifiers::SHIFT},
// diff_reset_lines: KeyEvent { code: KeyCode::Char('d'), modifiers: KeyModifiers::empty()},
// status_ignore_file: KeyEvent { code: KeyCode::Char('i'), modifiers: KeyModifiers::empty()},
// diff_stage_lines: KeyEvent { code: KeyCode::Char('s'), modifiers: KeyModifiers::empty()},
// stashing_save: KeyEvent { code: KeyCode::Char('s'), modifiers: KeyModifiers::empty()},
// stashing_toggle_untracked: KeyEvent { code: KeyCode::Char('u'), modifiers: KeyModifiers::empty()},
// stashing_toggle_index: KeyEvent { code: KeyCode::Char('i'), modifiers: KeyModifiers::empty()},
// stash_apply: KeyEvent { code: KeyCode::Char('a'), modifiers: KeyModifiers::empty()},
// stash_open: KeyEvent { code: KeyCode::Right, modifiers: KeyModifiers::empty()},
// stash_drop: KeyEvent { code: KeyCode::Char('D'), modifiers: KeyModifiers::SHIFT},
// cmd_bar_toggle: KeyEvent { code: KeyCode::Char('.'), modifiers: KeyModifiers::empty()},
// log_tag_commit: KeyEvent { code: KeyCode::Char('t'), modifiers: KeyModifiers::empty()},
// log_mark_commit: KeyEvent { code: KeyCode::Char(' '), modifiers: KeyModifiers::empty()},
// commit_amend: KeyEvent { code: KeyCode::Char('a'), modifiers: KeyModifiers::CONTROL},
// copy: KeyEvent { code: KeyCode::Char('y'), modifiers: KeyModifiers::empty()},
// create_branch: KeyEvent { code: KeyCode::Char('c'), modifiers: KeyModifiers::empty()},
// rename_branch: KeyEvent { code: KeyCode::Char('r'), modifiers: KeyModifiers::empty()},
// select_branch: KeyEvent { code: KeyCode::Char('b'), modifiers: KeyModifiers::empty()},
// delete_branch: KeyEvent { code: KeyCode::Char('D'), modifiers: KeyModifiers::SHIFT},
// merge_branch: KeyEvent { code: KeyCode::Char('m'), modifiers: KeyModifiers::empty()},
// rebase_branch: KeyEvent { code: KeyCode::Char('R'), modifiers: KeyModifiers::SHIFT},
// compare_commits: KeyEvent { code: KeyCode::Char('C'), modifiers: KeyModifiers::SHIFT},
// tags: KeyEvent { code: KeyCode::Char('T'), modifiers: KeyModifiers::SHIFT},
// delete_tag: KeyEvent { code: KeyCode::Char('D'), modifiers: KeyModifiers::SHIFT},
// select_tag: KeyEvent { code: KeyCode::Enter, modifiers: KeyModifiers::empty()},
// push: KeyEvent { code: KeyCode::Char('p'), modifiers: KeyModifiers::empty()},
// force_push: KeyEvent { code: KeyCode::Char('P'), modifiers: KeyModifiers::SHIFT},
// undo_commit: KeyEvent { code: KeyCode::Char('U'), modifiers: KeyModifiers::SHIFT},
// pull: KeyEvent { code: KeyCode::Char('f'), modifiers: KeyModifiers::empty()},
// abort_merge: KeyEvent { code: KeyCode::Char('A'), modifiers: KeyModifiers::SHIFT},
// open_file_tree: KeyEvent { code: KeyCode::Char('F'), modifiers: KeyModifiers::SHIFT},
// file_find: KeyEvent { code: KeyCode::Char('f'), modifiers: KeyModifiers::empty()},
// stage_unstage_item: KeyEvent { code: KeyCode::Enter, modifiers: KeyModifiers::empty()},
// tag_annotate: KeyEvent { code: KeyCode::Char('a'), modifiers: KeyModifiers::CONTROL},