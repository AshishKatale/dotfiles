{
  "": {
    "u": {
      "command": "undo",
      "count": "_ctx.count"
    },
    "U": {
      "command": "redo",
      "count": "_ctx.count"
    },
    "C": {
      "command": "editor.action.insertCursorBelow",
      "count": "_ctx.count"
    },
    ",": "removeSecondaryCursors",
    "J": {
      "command": "editor.action.joinLines",
      "count": "_ctx.count"
    },
    "x": {
      "command": [
        {
          "command": "cursorRightSelect",
          "when": "_ctx.selection.contains(_ctx.lineAt(_ctx.pos.line).range)"
        },
        "expandLineSelection",
        "cursorLeftSelect"
      ],
      "count": "_ctx.count"
    },
    "X": ["expandLineSelection", "cursorLeftSelect"],
    "<": {
      "command": "editor.action.outdentLines",
      "count": "_ctx.count"
    },
    ">": {
      "command": "editor.action.indentLines",
      "count": "_ctx.count"
    },
    "y": ["modalEditor.yank", "modalEditor.setNormalMode"],
    "d": ["modalEditor.cut", "modalEditor.setNormalMode"],
    "p": {
      "command": "modalEditor.paste",
      "count": "_ctx.count"
    },
    "P": {
      "command": {
        "command": "modalEditor.paste",
        "args": {
          "before": true
        }
      },
      "count": "_ctx.count"
    },
    "`": "modalEditor.toLowerCase",
    "~": "modalEditor.toUpperCase",
    "r": {
      "": {
        "command": "modalEditor.transform",
        "computedArgs": true,
        "args": "{\n\t\t\t\t\ttransformer: text => _ctx.keys.charAt(_ctx.keys.length-1).repeat(text.length)\n\t\t\t\t}"
      }
    },
    ":": "modalEditor.setCommandMode",
    ".": {
      "command": "modalEditor.replayRecord",
      "args": "change"
    },
    "c": {
      "command": ["modalEditor.cut", "modalEditor.setInsertMode"],
      "record": "change"
    },
    "i": {
      "command": "modalEditor.setInsertMode",
      "record": "change"
    },
    "I": {
      "command": ["cursorLineStart", "modalEditor.setInsertMode"],
      "record": "change"
    },
    "a": {
      "command": ["cursorRight", "modalEditor.setInsertMode"],
      "record": "change"
    },
    "A": {
      "command": ["cursorLineEnd", "modalEditor.setInsertMode"],
      "record": "change"
    },
    "o": {
      "command": ["editor.action.insertLineAfter", "modalEditor.setInsertMode"],
      "record": "change"
    },
    "O": {
      "command": [
        "editor.action.insertLineBefore",
        "modalEditor.setInsertMode"
      ],
      "record": "change"
    },
    "G": {
      "command": "modalEditor.gotoLine",
      "computedArgs": true,
      "args": "_ctx.count",
      "when": "_ctx.count !== undefined"
    },
    "m": {
      "m": "editor.action.jumpToBracket"
    },
    "g": {
      "g": {
        "command": "modalEditor.gotoLine",
        "computedArgs": true,
        "args": "_ctx.count || 1"
      },
      "e": "cursorBottom",
      ".": "workbench.action.navigateToLastEditLocation",
      "p": "workbench.action.previousEditor",
      "n": "workbench.action.nextEditor",
      "d": "editor.action.revealDefinition"
    },
    " ": {
      "y": [
        {
          "command": "modalEditor.yank",
          "args": {
            "register": ""
          }
        },
        "modalEditor.setNormalMode"
      ],
      "p": {
        "command": "modalEditor.paste",
        "args": {
          "register": ""
        }
      },
      "P": {
        "command": "modalEditor.paste",
        "args": {
          "register": "",
          "before": true
        }
      },
      "f": "workbench.action.quickOpen",
      "b": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
      "k": "editor.action.showHover",
      "?": "workbench.action.showCommands"
    },
    "/": "actions.find",
    "n": [
      {
        "command": "cursorRight",
        "when": "!_ctx.selection.isEmpty"
      },
      "editor.action.nextMatchFindAction",
      {
        "command": "cursorLeftSelect",
        "when": "!_ctx.selection.isEmpty"
      }
    ],
    "N": [
      {
        "command": "cursorRight",
        "when": "!_ctx.selection.isEmpty"
      },
      "editor.action.previousMatchFindAction",
      {
        "command": "cursorLeftSelect",
        "when": "!_ctx.selection.isEmpty"
      }
    ],
    "[": {
      "d": "editor.action.marker.prev"
    },
    "]": {
      "d": "editor.action.marker.next"
    }
  },
  "normal": {
    "h": {
      "command": ["modalEditor.clearSelections", "cursorLeft"],
      "count": "_ctx.count"
    },
    "j": {
      "command": ["modalEditor.clearSelections", "cursorDown"],
      "count": "_ctx.count"
    },
    "k": {
      "command": ["modalEditor.clearSelections", "cursorUp"],
      "count": "_ctx.count"
    },
    "l": {
      "command": ["modalEditor.clearSelections", "cursorRight"],
      "count": "_ctx.count"
    },
    "w": {
      "command": [
        "modalEditor.clearSelections",
        [
          {
            "command": "cursorRight",
            "when": "/(^.?$)|(\\s[^\\s])|([^\\s]\\s)|(.\\b.)/.test(_ctx.lineAt(_ctx.pos.line).text.substring(_ctx.pos.character, _ctx.pos.character+2))"
          },
          "cursorWordStartRightSelect",
          "cursorLeftSelect"
        ]
      ],
      "count": "_ctx.count"
    },
    "b": {
      "command": ["modalEditor.clearSelections", "cursorWordStartLeftSelect"],
      "count": "_ctx.count"
    },
    "f": {
      "": {
        "command": {
          "command": [
            "modalEditor.clearSelections",
            {
              "command": "modalEditor.findText",
              "computedArgs": true,
              "args": "{\n\t\t\t\t\ttext: _ctx.keys.charAt(_ctx.keys.length-1),\n\t\t\t\t\tselect: true\n\t\t\t\t}"
            }
          ],
          "count": "_ctx.count"
        },
        "record": "motion"
      }
    },
    "F": {
      "": {
        "command": {
          "command": [
            "modalEditor.clearSelections",
            {
              "command": "modalEditor.findText",
              "computedArgs": true,
              "args": "{\n\t\t\t\t\ttext: _ctx.keys.charAt(_ctx.keys.length-1),\n\t\t\t\t\tbackward: true,\n\t\t\t\t\tselect: true\n\t\t\t\t}"
            }
          ],
          "count": "_ctx.count"
        },
        "record": "motion"
      }
    },
    "t": {
      "": {
        "command": {
          "command": [
            "modalEditor.clearSelections",
            {
              "command": "modalEditor.findText",
              "computedArgs": true,
              "args": "{\n\t\t\t\t\ttext: _ctx.keys.charAt(_ctx.keys.length-1),\n\t\t\t\t\ttill: true,\n\t\t\t\t\tselect: true\n\t\t\t\t}"
            }
          ],
          "count": "_ctx.count"
        },
        "record": "motion"
      }
    },
    "T": {
      "": {
        "command": {
          "command": [
            "modalEditor.clearSelections",
            {
              "command": "modalEditor.findText",
              "computedArgs": true,
              "args": "{\n\t\t\t\t\ttext: _ctx.keys.charAt(_ctx.keys.length-1),\n\t\t\t\t\ttill: true,\n\t\t\t\t\tbackward: true,\n\t\t\t\t\tselect: true\n\t\t\t\t}"
            }
          ],
          "count": "_ctx.count"
        },
        "record": "motion"
      }
    },
    "g": {
      "h": "cursorLineStart",
      "l": [
        "cursorLineEnd",
        {
          "command": "cursorLeft",
          "when": "_ctx.pos.character > 0"
        }
      ]
    },
    "v": "modalEditor.setSelectMode"
  },
  "select": {
    "h": {
      "command": "cursorLeftSelect",
      "count": "_ctx.count"
    },
    "j": {
      "command": "cursorDownSelect",
      "count": "_ctx.count"
    },
    "k": {
      "command": "cursorUpSelect",
      "count": "_ctx.count"
    },
    "l": {
      "command": "cursorRightSelect",
      "count": "_ctx.count"
    },
    "w": {
      "command": [
        {
          "command": "cursorRightSelect",
          "when": "/(^.?$)|(\\s[^\\s])|([^\\s]\\s)|(.\\b.)/.test(_ctx.lineAt(_ctx.pos.line).text.substring(_ctx.pos.character, _ctx.pos.character+2))"
        },
        "cursorWordStartRightSelect",
        "cursorLeftSelect"
      ],
      "count": "_ctx.count"
    },
    "b": {
      "command": "cursorWordStartLeftSelect",
      "count": "_ctx.count"
    },
    "f": {
      "": {
        "command": {
          "command": "modalEditor.findText",
          "computedArgs": true,
          "args": "{\n\t\t\t\t\ttext: _ctx.keys.charAt(_ctx.keys.length-1),\n\t\t\t\t\tselect: true\n\t\t\t\t}"
        },
        "count": "_ctx.count"
      }
    },
    "F": {
      "": {
        "command": {
          "command": "modalEditor.findText",
          "computedArgs": true,
          "args": "{\n\t\t\t\t\ttext: _ctx.keys.charAt(_ctx.keys.length-1),\n\t\t\t\t\tbackward: true,\n\t\t\t\t\tselect: true\n\t\t\t\t}"
        },
        "count": "_ctx.count"
      }
    },
    "t": {
      "": {
        "command": {
          "command": "modalEditor.findText",
          "computedArgs": true,
          "args": "{\n\t\t\t\t\ttext: _ctx.keys.charAt(_ctx.keys.length-1),\n\t\t\t\t\ttill: true,\n\t\t\t\t\tselect: true\n\t\t\t\t}"
        },
        "count": "_ctx.count"
      }
    },
    "T": {
      "": {
        "command": {
          "command": "modalEditor.findText",
          "computedArgs": true,
          "args": "{\n\t\t\t\t\ttext: _ctx.keys.charAt(_ctx.keys.length-1),\n\t\t\t\t\ttill: true,\n\t\t\t\t\tbackward: true,\n\t\t\t\t\tselect: true\n\t\t\t\t}"
        },
        "count": "_ctx.count"
      }
    },
    "g": {
      "h": "cursorLineStartSelect",
      "l": [
        "cursorLineEndSelect",
        {
          "command": "cursorLeftSelect",
          "when": "_ctx.pos.character > 0"
        }
      ]
    },
    "v": "modalEditor.setNormalMode"
  },
  "command": {
    "w": "workbench.action.files.save",
    "q": "workbench.action.closeActiveEditor"
  }
}
